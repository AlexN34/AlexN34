<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alex's Home page</title><link href="https://AlexN34.github.io/" rel="alternate"></link><link href="https://AlexN34.github.io/feeds/all.atom.xml" rel="self"></link><id>https://AlexN34.github.io/</id><updated>2018-04-12T16:23:00+10:00</updated><entry><title>Learning Ansible</title><link href="https://AlexN34.github.io/blog/2018/learning-ansible" rel="alternate"></link><published>2018-04-12T16:23:00+10:00</published><updated>2018-04-12T16:23:00+10:00</updated><author><name>Alex Nguyen</name></author><id>tag:alexn34.github.io,2018-04-12:/blog/2018/learning-ansible</id><summary type="html">&lt;p&gt;New DevOps tool: Ansible&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Moving into Digital Platforms (Cloud and DevOps kind of work) is going to require a new toolset - knowing Python, it seems like Ansible would be a good choice to pick up for infrastructure automation.&lt;/p&gt;
&lt;p&gt;Toying around with local hosts looks promising so far - links to playbooks &lt;a href="https://github.com/AlexN34/learn-ansible"&gt;here&lt;/a&gt;. Next step is orchestrating real servers - fingers crossed I'll get to explore/use some the extensibility features for work!&lt;/p&gt;
&lt;h3&gt;Tidbits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ansible runs with central controller node running commands on other nodes (which don't necessarily have Ansible installed)&lt;/li&gt;
&lt;li&gt;SSH is used so as long as that's ok you can orchestrate other servers&lt;/li&gt;
&lt;li&gt;Host node should run Linux, scripts can talk to Windows nodes (using specific modules e.g. &lt;code&gt;win_shell&lt;/code&gt; instead of &lt;code&gt;shell&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The INI configuration file is called inventory (&lt;code&gt;-i&lt;/code&gt; flag) - list host address of grouped servers&lt;/li&gt;
&lt;li&gt;In playbook, can set variables with &lt;code&gt;vars&lt;/code&gt; and refer throughout playbook YML using &lt;code&gt;{{}}&lt;/code&gt; syntax&lt;/li&gt;
&lt;li&gt;Can configure custom behaviour on repeat runs through &lt;code&gt;notify&lt;/code&gt; (in conjunction with &lt;code&gt;changed_when&lt;/code&gt;) and &lt;code&gt;handlers&lt;/code&gt; syntax&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Commands&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ansible is installed and run as a python package: &lt;code&gt;pip install ansible ansible-lint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ansible -i &amp;lt;inventory&amp;gt; &amp;lt;host&amp;gt; -m &amp;lt;ansible-module&amp;gt; -a &amp;lt;module-arguments&amp;gt;&lt;/code&gt; to run commands on host/group of hosts interactively on a shell e.g. &lt;code&gt;ansible -i webapp local -m command -a "uname -r"&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ansible &lt;code&gt;playbook.yml&lt;/code&gt; is analogous to &lt;code&gt;docker-compose.yml&lt;/code&gt;: YAML-fied version of the active ad-hoc command&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-playbook -i &amp;lt;inventory-file&amp;gt; &amp;lt;playbook.yml&amp;gt;&lt;/code&gt; to a run a playbook &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ansible-doc&lt;/code&gt; is &lt;code&gt;man&lt;/code&gt; for modules&lt;/li&gt;
&lt;/ul&gt;</content><category term="ansible"></category><category term="devops"></category></entry><entry><title>Java and OCR Text Reading with Android Vision API</title><link href="https://AlexN34.github.io/blog/2018/androidvision" rel="alternate"></link><published>2018-03-31T17:50:00+11:00</published><updated>2018-03-31T17:50:00+11:00</updated><author><name>Alex Nguyen</name></author><id>tag:alexn34.github.io,2018-03-31:/blog/2018/androidvision</id><summary type="html">&lt;p&gt;Tinkering with Java/Android -- one surefire way to consume an Easter weekend!&lt;/p&gt;</summary><content type="html">&lt;h2&gt;SpringBoot&lt;/h2&gt;
&lt;p&gt;Last weekend I spent a lot of time re-familiarising with Java - I've spent a lot of time in the Python space recently. &lt;/p&gt;
&lt;p&gt;I learned how to use &lt;a href="https://projects.spring.io/spring-boot/"&gt;SpringBoot&lt;/a&gt; for a take-home which required exposing an API on a Server connected to a MySQL backend and essentially writing a client to pretty print query results.&lt;/p&gt;
&lt;p&gt;The general approach was similar to &lt;code&gt;Flask&lt;/code&gt; in that there are provided annotations that route REST endpoints - you just need to route requests to the right functions and bob's your uncle. The package &lt;/p&gt;
&lt;p&gt;JSON structure/type conversion was somewhat magical -- where with &lt;code&gt;requests&lt;/code&gt; you parse data structures from strings/ints on raw JSON, using Springboot with &lt;code&gt;Jackson&lt;/code&gt; in Java provides somewhat implicit conversion. Instead, you make a class that represents your JSON object (though I thankfully didn't need it, nesting works by having wrapper classes made too) and the library handles parsing to the input Object types you require. In my case, I needed dates called as a String to be parsed into a Date - it handled with no fuss which was convenient.&lt;/p&gt;
&lt;p&gt;Still, I find myself preferring the ability to interact with objects in Python and the ability to simply &lt;code&gt;pip install&lt;/code&gt; &amp;amp; &lt;code&gt;import&lt;/code&gt; stuff instead of fiddling with &lt;code&gt;maven&lt;/code&gt; XML dependencies and plugins. I would say 50% of project time was dedicated to figuring out how to make my project &lt;code&gt;.jar&lt;/code&gt; files run from commandline the way they do within the &lt;code&gt;IntelliJ&lt;/code&gt; IDE!
That could be my fault for not knowing how to configure the IDE to output the right thing for me yet, but it was pretty frustrating.&lt;/p&gt;
&lt;h2&gt;Android&lt;/h2&gt;
&lt;p&gt;This Easter weekend I decided to scratch an itch that has been in my brain for some time - is there a library that provides streamed, locally processed text scanning for mobile app development? Essentially I wanted something in the vein of of a QR Code scanner library, without the need to take pictures to interact with the captured code. Also instead of a QR code, I wanted to manipulate arbitrary text (i.e. optical character recognition) I wanted it to work locally for performance reasons as well as offline functionality. &lt;/p&gt;
&lt;p&gt;Knowing nothing about computer vision, I wanted to find a library to help out with this - rough searching brought up the &lt;a href="https://codelabs.developers.google.com/codelabs/mobile-vision-ocr/"&gt;Google Vision APIs sample&lt;/a&gt;. I spent the better part of a day (the tutorial takes 30min but I spent time investigating the API) to find it seems to deliver what I was looking for (particularly the local processing part).&lt;/p&gt;
&lt;p&gt;I followed the introduction and slightly adapted the result to do further simple text parsing - at a glance it recognises printed text pretty well. I'm hoping to get the time to continue tinkering in the next couple months - I'm envisioning a conversion app I can use by hovering on the fly instead of repeatedly typing numbers into my phone's calculator. For anyone interested, the project currently lives &lt;a href="https://github.com/AlexN34/ocrconverter"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Docker&lt;/h2&gt;
&lt;p&gt;My docker (compose) file repo &lt;a href="https://github.com/AlexN34/dockerfiles"&gt;here&lt;/a&gt; has now amassed files for running JetBrains IDEs: IntelliJ IDEA, PyCharm and AndroidStudio (this counts, it's based on IntelliJ)! &lt;/p&gt;
&lt;p&gt;Each file took a lot longer than expected to set up because while they all use the same general structure for config storage, they're not &lt;em&gt;exactly&lt;/em&gt; the same. I kept getting tripped up by the fact that the path looks like &lt;code&gt;~/{IDE Name}{version}/&lt;/code&gt;; it changes with every resolution. I could probably make it general with symlinking something like &lt;code&gt;ln -s ~/.{IDE Name} {IDE Name}{version}&lt;/code&gt;in the Dockerfile that builds the image in the first place and forever keeping a singular named repo for &lt;code&gt;.{IDE Name}&lt;/code&gt;, but for now the files just code in the latest version number. &lt;/p&gt;
&lt;p&gt;One cool thing was that it's possible to get USB passthrough to the docker container (for debugging on device) simply by mounting the &lt;code&gt;/dev/usb&lt;/code&gt; folder (&lt;em&gt;everything&lt;/em&gt; is a file) in Linux. Won't work on Windows though as apparently usb passthrough &lt;a href="https://forums.docker.com/t/docker-for-windows-usb-support/38693/2"&gt;isn't yet supported&lt;/a&gt; which dampens the dream of crossplatform for now.&lt;/p&gt;</content><category term="android"></category><category term="mobile"></category><category term="apps"></category><category term="ocr"></category><category term="docker"></category></entry><entry><title>Docker Compose</title><link href="https://AlexN34.github.io/blog/2018/docker-compose" rel="alternate"></link><published>2018-03-25T09:15:00+11:00</published><updated>2018-03-25T09:15:00+11:00</updated><author><name>Alex Nguyen</name></author><id>tag:alexn34.github.io,2018-03-25:/blog/2018/docker-compose</id><summary type="html">&lt;p&gt;Continuing experimentation with Docker using Docker-compose&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Magical scriptable &lt;code&gt;docker run&lt;/code&gt; commands&lt;/h2&gt;
&lt;p&gt;I originally picked up Docker as a last ditch attempt to install a contained Python 3.4 environmenfor a work project after the usual approaches of &lt;code&gt;pyenv&lt;/code&gt; etc were just not working that day. After being impressed by the performance of containerisation I've been keen to stretch into bringing more of my environment into containers in hope of one day achieving a cross-platform setup.&lt;/p&gt;
&lt;p&gt;This weekend I made a start compiling some run configs and docker files &lt;a href="https://github.com/AlexN34/dockerfiles"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I haven't found an ideal way to abstract out system dependent filepaths or test whether these yaml files work the same on both Windows/MacOS/Linux) yet, but for now I'm using predefined environment variables to store mounted volumes.&lt;/p&gt;
&lt;h3&gt;Command Lookup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker-compose up &amp;lt;docker-compose.yml&amp;gt;&lt;/code&gt; to spin up instance of container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose down &amp;lt;docker-compose.yml&amp;gt;&lt;/code&gt; for teardown&lt;/li&gt;
&lt;/ul&gt;</content><category term="docker"></category><category term="compose"></category><category term="cheatsheets"></category></entry><entry><title>Docker Cheatsheet</title><link href="https://AlexN34.github.io/blog/2018/docker-cheatsheet" rel="alternate"></link><published>2018-03-23T17:19:00+11:00</published><updated>2018-03-23T17:19:00+11:00</updated><author><name>Alex Nguyen</name></author><id>tag:alexn34.github.io,2018-03-23:/blog/2018/docker-cheatsheet</id><summary type="html">&lt;p&gt;Recently completed a Lynda course on using Docker - saved some commands for future reference.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Docker Notes&lt;/h1&gt;
&lt;p&gt;Late last year, I took some notes whilst going through Lynda's Learning Docker course and have built up my own documented summarised as they have become useful to me. Posting this to remind future me (and anyone else reading) when syntax is inevitably forgotten.&lt;/p&gt;
&lt;h1&gt;Docker lifecycle management&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run ...&lt;/code&gt; -&amp;gt; &lt;code&gt;docker stop&lt;/code&gt; (or exit process) -&amp;gt; &lt;code&gt;docker commit ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; starts a container with specified command as main process - container stops when this process dies&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;--memory &amp;lt;max-allowed-memory&amp;gt;&lt;/code&gt; and &lt;code&gt;--cpu-shares &amp;lt;int&amp;gt;&lt;/code&gt; to manage memory and clock time allocation (the latter is relative int)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker commit&lt;/code&gt; creates a new image from a running container - saves updates&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker exec&lt;/code&gt; creates new process in container - limited in scope&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker logs &amp;lt;container-name&amp;gt;&lt;/code&gt; saves container commandline output to file for debug - careful this gets big fast&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;docker ps -a&lt;/span&gt;
&lt;span class="code-line"&gt;docker images&lt;/span&gt;
&lt;span class="code-line"&gt;docker commit &amp;lt;container-id&amp;gt; &amp;lt;tag-name&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Commiting creates tag for you&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; runs &lt;code&gt;docker pull&lt;/code&gt; for you - tries to fetch an image remotely&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Docker commands for container bring to foreground/background&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker attach &amp;lt;container-name&amp;gt;&lt;/code&gt; attaches a terminal to running container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+P Ctrl+Q&lt;/code&gt; detaches terminal from container&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Don't let containers fetch dependencies on start; include them with the image. If repo contents change, containers are unaffected&lt;/li&gt;
&lt;li&gt;Don't leave big chunks of worked in unnamed containers -- commit them, as they will be accidentally deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Docker networking&lt;/h1&gt;
&lt;h2&gt;Dynamic private network linking&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;docker run --rm -ti --net=example --name server ubuntu:14.04 bash&lt;/span&gt;
&lt;span class="code-line"&gt;nc -lp 1234&lt;/span&gt;
&lt;span class="code-line"&gt;docker run --rm -ti --link server --net=example --name client ubuntu:14.04 bash&lt;/span&gt;
&lt;span class="code-line"&gt;nc server 1234&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Bind addresses to 0.0.0.0 to allow connections from outside&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;--net=host&lt;/code&gt; to turn off network isolation preventing containers modifying host network (could be useful for debugging)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Routing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Docker uses NAT under the hood to do IP replacement for addressing between containers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo iptables -n -L -t nat&lt;/code&gt; and check DOCKER chain; exposing container ports should create &lt;code&gt;DNAT&lt;/code&gt; entries&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Services private to container&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Specify singular host to use&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;docker run -p 127.0.0.1:1234:1234/tcp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Volumes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Virtual discs to store and share data in 2 main forms: persistent and ephemeral (only while container is using the resource)&lt;/li&gt;
&lt;li&gt;Not part of images; local data to a specific host&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Share folders inside containers with host&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run -ti -v /home/alex/Documents/:/shared-folder ubuntu bash&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run command from linux fs (note linux vm refers to the docker-machine on Win10/Mac or host machine on Linux)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v &amp;lt;linux vm folder path&amp;gt;:/&amp;lt;container fs folder path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Spin up container and allocate (ephemeral) volume storage: &lt;code&gt;docker run -ti -v /shared-folder ubuntu bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Access/run in container with &lt;code&gt;docker run -ti --volumes-from frosty_shaw ubuntu bash&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Interacting with Registries&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker search ubuntu&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pushing local image to cloud repo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker tag &amp;lt;local name:[tag]&amp;gt; &amp;lt;url/path/to/repo:[tag]&amp;gt;&lt;/code&gt; first to make image you're pushing exist first&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker push &amp;lt;url/path/to/repo:[tag]&lt;/code&gt; to push local instance to current repository &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Dockerfiles (creation, etc)&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;docker build -t name-of-result .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; represents current directory&lt;/li&gt;
&lt;li&gt;Build spits out an image to local &lt;code&gt;docker&lt;/code&gt; registry&lt;/li&gt;
&lt;li&gt;Docker caches per line -- put lines that change often towards the bottom so unchanged stuff is processed faster&lt;/li&gt;
&lt;li&gt;Processes started on one line will not be running on next line &lt;/li&gt;
&lt;li&gt;Environment variables set can persist&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Triage&lt;/h1&gt;
&lt;p&gt;Commands for when things go wrong
- run command on container of choice with &lt;code&gt;docker exec -u 0 -it container-name bash&lt;/code&gt;&lt;/p&gt;</content><category term="docker"></category><category term="cheatsheets"></category></entry><entry><title>New Year's Post</title><link href="https://AlexN34.github.io/blog/2018/new-years-post" rel="alternate"></link><published>2018-01-01T22:22:00+11:00</published><updated>2018-01-01T22:22:00+11:00</updated><author><name>Alex Nguyen</name></author><id>tag:alexn34.github.io,2018-01-01:/blog/2018/new-years-post</id><summary type="html">&lt;p&gt;Going to start posting stuff here! Theme fixed.&lt;/p&gt;</summary><content type="html">&lt;p&gt;New Year's Post&lt;/p&gt;
&lt;h6&gt;&lt;/h6&gt;
&lt;p&gt;Going to start posting stuff here! Theme fixed.&lt;/p&gt;</content></entry></feed>