<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alex's Home page</title><link href="https://AlexN34.github.io/" rel="alternate"></link><link href="https://AlexN34.github.io/feeds/all.atom.xml" rel="self"></link><id>https://AlexN34.github.io/</id><updated>2018-03-25T09:15:00+11:00</updated><entry><title>Docker Compose</title><link href="https://AlexN34.github.io/blog/2018/docker-compose" rel="alternate"></link><published>2018-03-25T09:15:00+11:00</published><updated>2018-03-25T09:15:00+11:00</updated><author><name>Alex Nguyen</name></author><id>tag:alexn34.github.io,2018-03-25:/blog/2018/docker-compose</id><summary type="html">&lt;p&gt;Continuing experimentation with Docker using Docker-compose&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Magical scriptable &lt;code&gt;docker run&lt;/code&gt; commands&lt;/h2&gt;
&lt;p&gt;I originally picked up Docker as a last ditch attempt to install a contained Python 3.4 environmenfor a work project after the usual approaches of &lt;code&gt;pyenv&lt;/code&gt; etc were just not working that day. After being impressed by the performance of containerisation I've been keen to stretch into bringing more of my environment into containers in hope of one day achieving a cross-platform setup.&lt;/p&gt;
&lt;p&gt;This weekend I made a start compiling some run configs and docker files &lt;a href="https://github.com/AlexN34/dockerfiles"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I haven't found an ideal way to abstract out system dependent filepaths or test whether these yaml files work the same on both Windows/MacOS/Linux) yet, but for now I'm using predefined environment variables to store mounted volumes.&lt;/p&gt;
&lt;h3&gt;Command Lookup&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker-compose up &amp;lt;docker-compose.yml&amp;gt;&lt;/code&gt; to spin up instance of container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose down &amp;lt;docker-compose.yml&amp;gt;&lt;/code&gt; for teardown&lt;/li&gt;
&lt;/ul&gt;</content><category term="docker"></category><category term="compose"></category><category term="cheatsheets"></category></entry><entry><title>Docker Cheatsheet</title><link href="https://AlexN34.github.io/blog/2018/docker-cheatsheet" rel="alternate"></link><published>2018-03-23T17:19:00+11:00</published><updated>2018-03-23T17:19:00+11:00</updated><author><name>Alex Nguyen</name></author><id>tag:alexn34.github.io,2018-03-23:/blog/2018/docker-cheatsheet</id><summary type="html">&lt;p&gt;Recently completed a Lynda course on using Docker - saved some commands for future reference.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Docker Notes&lt;/h1&gt;
&lt;p&gt;Late last year, I took some notes whilst going through Lynda's Learning Docker course and have built up my own documented summarised as they have become useful to me. Posting this to remind future me (and anyone else reading) when syntax is inevitably forgotten.&lt;/p&gt;
&lt;h1&gt;Docker lifecycle management&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run ...&lt;/code&gt; -&amp;gt; &lt;code&gt;docker stop&lt;/code&gt; (or exit process) -&amp;gt; &lt;code&gt;docker commit ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; starts a container with specified command as main process - container stops when this process dies&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;--memory &amp;lt;max-allowed-memory&amp;gt;&lt;/code&gt; and &lt;code&gt;--cpu-shares &amp;lt;int&amp;gt;&lt;/code&gt; to manage memory and clock time allocation (the latter is relative int)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker commit&lt;/code&gt; creates a new image from a running container - saves updates&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker exec&lt;/code&gt; creates new process in container - limited in scope&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker logs &amp;lt;container-name&amp;gt;&lt;/code&gt; saves container commandline output to file for debug - careful this gets big fast&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;docker ps -a&lt;/span&gt;
&lt;span class="code-line"&gt;docker images&lt;/span&gt;
&lt;span class="code-line"&gt;docker commit &amp;lt;container-id&amp;gt; &amp;lt;tag-name&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Commiting creates tag for you&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; runs &lt;code&gt;docker pull&lt;/code&gt; for you - tries to fetch an image remotely&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Docker commands for container bring to foreground/background&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker attach &amp;lt;container-name&amp;gt;&lt;/code&gt; attaches a terminal to running container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+P Ctrl+Q&lt;/code&gt; detaches terminal from container&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Don't let containers fetch dependencies on start; include them with the image. If repo contents change, containers are unaffected&lt;/li&gt;
&lt;li&gt;Don't leave big chunks of worked in unnamed containers -- commit them, as they will be accidentally deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Docker networking&lt;/h1&gt;
&lt;h2&gt;Dynamic private network linking&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;docker run --rm -ti --net=example --name server ubuntu:14.04 bash&lt;/span&gt;
&lt;span class="code-line"&gt;nc -lp 1234&lt;/span&gt;
&lt;span class="code-line"&gt;docker run --rm -ti --link server --net=example --name client ubuntu:14.04 bash&lt;/span&gt;
&lt;span class="code-line"&gt;nc server 1234&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Bind addresses to 0.0.0.0 to allow connections from outside&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;--net=host&lt;/code&gt; to turn off network isolation preventing containers modifying host network (could be useful for debugging)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Routing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Docker uses NAT under the hood to do IP replacement for addressing between containers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo iptables -n -L -t nat&lt;/code&gt; and check DOCKER chain; exposing container ports should create &lt;code&gt;DNAT&lt;/code&gt; entries&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Services private to container&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Specify singular host to use&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;docker run -p 127.0.0.1:1234:1234/tcp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Volumes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Virtual discs to store and share data in 2 main forms: persistent and ephemeral (only while container is using the resource)&lt;/li&gt;
&lt;li&gt;Not part of images; local data to a specific host&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Share folders inside containers with host&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run -ti -v /home/alex/Documents/:/shared-folder ubuntu bash&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run command from linux fs (note linux vm refers to the docker-machine on Win10/Mac or host machine on Linux)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v &amp;lt;linux vm folder path&amp;gt;:/&amp;lt;container fs folder path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Spin up container and allocate (ephemeral) volume storage: &lt;code&gt;docker run -ti -v /shared-folder ubuntu bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Access/run in container with &lt;code&gt;docker run -ti --volumes-from frosty_shaw ubuntu bash&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Interacting with Registries&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker search ubuntu&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pushing local image to cloud repo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker tag &amp;lt;local name:[tag]&amp;gt; &amp;lt;url/path/to/repo:[tag]&amp;gt;&lt;/code&gt; first to make image you're pushing exist first&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker push &amp;lt;url/path/to/repo:[tag]&lt;/code&gt; to push local instance to current repository &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Dockerfiles (creation, etc)&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;docker build -t name-of-result .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; represents current directory&lt;/li&gt;
&lt;li&gt;Build spits out an image to local &lt;code&gt;docker&lt;/code&gt; registry&lt;/li&gt;
&lt;li&gt;Docker caches per line -- put lines that change often towards the bottom so unchanged stuff is processed faster&lt;/li&gt;
&lt;li&gt;Processes started on one line will not be running on next line &lt;/li&gt;
&lt;li&gt;Environment variables set can persist&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Triage&lt;/h1&gt;
&lt;p&gt;Commands for when things go wrong
- run command on container of choice with &lt;code&gt;docker exec -u 0 -it container-name bash&lt;/code&gt;&lt;/p&gt;</content><category term="docker"></category><category term="cheatsheets"></category></entry><entry><title>New Year's Post</title><link href="https://AlexN34.github.io/blog/2018/new-years-post" rel="alternate"></link><published>2018-01-01T22:22:00+11:00</published><updated>2018-01-01T22:22:00+11:00</updated><author><name>Alex Nguyen</name></author><id>tag:alexn34.github.io,2018-01-01:/blog/2018/new-years-post</id><summary type="html">&lt;p&gt;Going to start posting stuff here! Theme fixed.&lt;/p&gt;</summary><content type="html">&lt;p&gt;New Year's Post&lt;/p&gt;
&lt;h6&gt;&lt;/h6&gt;
&lt;p&gt;Going to start posting stuff here! Theme fixed.&lt;/p&gt;</content></entry></feed>