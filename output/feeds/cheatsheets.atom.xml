<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alex's Home page - cheatsheets</title><link href="https://AlexN34.github.io/" rel="alternate"></link><link href="https://AlexN34.github.io/feeds/cheatsheets.atom.xml" rel="self"></link><id>https://AlexN34.github.io/</id><updated>2018-03-20T22:22:00+11:00</updated><entry><title>Docker Cheatsheet</title><link href="https://AlexN34.github.io/blog/2018/docker-cheatsheet" rel="alternate"></link><published>2018-03-20T22:22:00+11:00</published><updated>2018-03-20T22:22:00+11:00</updated><author><name>Alex Nguyen</name></author><id>tag:alexn34.github.io,2018-03-20:/blog/2018/docker-cheatsheet</id><summary type="html">&lt;p&gt;Recently completed a Lynda course on using Docker - saved some commands for future reference.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Docker Notes&lt;/h1&gt;
&lt;p&gt;I took some notes whilst going through Lynda's Learning Docker course (which was surprisingly practical given 3 hours of runtime). Posting this to jog future me's brain when I inevitably forget and need to use some of these commands.&lt;/p&gt;
&lt;h1&gt;Docker lifecycle management&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker run ...&lt;/code&gt; -&amp;gt; &lt;code&gt;docker stop&lt;/code&gt; (or exit process) -&amp;gt; &lt;code&gt;docker commit ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; starts a container with specified command as main process - container stops when this process dies&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;--memory &amp;lt;max-allowed-memory&amp;gt;&lt;/code&gt; and &lt;code&gt;--cpu-shares &amp;lt;int&amp;gt;&lt;/code&gt; to manage memory and clock time allocation (the latter is relative int)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker commit&lt;/code&gt; creates a new image from a running container - saves updates&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker exec&lt;/code&gt; creates new process in container - limited in scope&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker logs &amp;lt;container-name&amp;gt;&lt;/code&gt; saves container commandline output to file for debug - careful this gets big fast&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;docker ps -a&lt;/span&gt;
&lt;span class="code-line"&gt;docker images&lt;/span&gt;
&lt;span class="code-line"&gt;docker commit &amp;lt;container-id&amp;gt; &amp;lt;tag-name&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Commiting creates tag for you&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run&lt;/code&gt; runs &lt;code&gt;docker pull&lt;/code&gt; for you - tries to fetch an image remotely&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Docker commands for container bring to foreground/background&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker attach &amp;lt;container-name&amp;gt;&lt;/code&gt; attaches a terminal to running container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+P Ctrl+Q&lt;/code&gt; detaches terminal from container&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lessons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Don't let containers fetch dependencies on start; include them with the image. If repo contents change, containers are unaffected&lt;/li&gt;
&lt;li&gt;Don't leave big chunks of worked in unnamed containers -- commit them, as they will be accidentally deleted&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Docker networking&lt;/h1&gt;
&lt;h2&gt;Dynamic private network linking&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;docker run --rm -ti --net=example --name server ubuntu:14.04 bash&lt;/span&gt;
&lt;span class="code-line"&gt;nc -lp 1234&lt;/span&gt;
&lt;span class="code-line"&gt;docker run --rm -ti --link server --net=example --name client ubuntu:14.04 bash&lt;/span&gt;
&lt;span class="code-line"&gt;nc server 1234&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Bind addresses to 0.0.0.0 to allow connections from outside&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;--net=host&lt;/code&gt; to turn off network isolation preventing containers modifying host network (could be useful for debugging)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Routing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Docker uses NAT under the hood to do IP replacement for addressing between containers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo iptables -n -L -t nat&lt;/code&gt; and check DOCKER chain; exposing container ports should create &lt;code&gt;DNAT&lt;/code&gt; entries&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Services private to container&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Specify singular host to use&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;docker run -p 127.0.0.1:1234:1234/tcp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Volumes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Virtual discs to store and share data in 2 main forms: persistent and ephemeral (only while container is using the resource)&lt;/li&gt;
&lt;li&gt;Not part of images; local data to a specific host&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Share folders inside containers with host&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker run -ti -v /home/alex/Documents/:/shared-folder ubuntu bash&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run command from linux fs (note linux vm refers to the docker-machine on Win10/Mac or host machine on Linux)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v &amp;lt;linux vm folder path&amp;gt;:/&amp;lt;container fs folder path&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Spin up container and allocate (ephemeral) volume storage: &lt;code&gt;docker run -ti -v /shared-folder ubuntu bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Access/run in container with &lt;code&gt;docker run -ti --volumes-from frosty_shaw ubuntu bash&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Accessing Registries&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker search ubuntu&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Dockerfiles (creation, etc)&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;docker build -t name-of-result .&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; represents current directory&lt;/li&gt;
&lt;li&gt;Build spits out an image to local &lt;code&gt;docker&lt;/code&gt; registry&lt;/li&gt;
&lt;li&gt;Docker caches per line -- put lines that change often towards the bottom so unchanged stuff is processed faster&lt;/li&gt;
&lt;li&gt;Processes started on one line will not be running on next line &lt;/li&gt;
&lt;li&gt;Environment variables set can persist&lt;/li&gt;
&lt;/ul&gt;</content><category term="docker"></category><category term="cheatsheets"></category></entry></feed>